name: release

on:
  push:
    branches:
      - prerelease
      - release

jobs:
  linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        python-version: [37, 38, 39, 310]
    steps:
      - uses: actions/checkout@v2

      - name: Set python version
        run: |
          if [[ "${{ matrix.python-version }}" == "37" ]]; then
            echo "/opt/python/cp37-cp37m/bin" >> $GITHUB_PATH
          else
            echo "/opt/python/cp${{ matrix.python-version }}-cp${{ matrix.python-version }}/bin" >> $GITHUB_PATH
          fi

      - name: Check which python we use
        run: |
          echo $(which python)

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-18
          components: rustfmt
          default: true

      - name: Install tools
        run: |
          pip install poetry
          cargo install just
          yum install -y openssl11-devel mysql-devel postgresql-devel freetds-devel
          ln -sfn /usr/lib64/pkgconfig/openssl11.pc /usr/lib64/pkgconfig/openssl.pc
          ln -sfn /usr/lib64/pkgconfig/libssl11.pc /usr/lib64/pkgconfig/libssl.pc

      - name: Setup project
        env:
          RUSTFLAGS: "-C link-arg=-s"
          SQLITE3_STATIC: 1
        run: |
          just bootstrap-python
          just ci-build-python-extention
          echo "Content of the source folder"
          ls connectorx-python/connectorx

      - name: Build wheel
        run: |
          just ci-build-python-wheel
          echo "Built artifacts"
          ls target/wheels

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "linux-${{ matrix.python-version }}"
          path: target/wheels/*.whl

      - name: Persist artifacts source code
        uses: actions/upload-artifact@v2
        if: matrix.python-version == 39
        with:
          name: "linux-${{ matrix.python-version }}"
          path: target/wheels/*.tar.gz

  win32:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2

      - uses: ankane/setup-mysql@v1
        with:
          mysql-version: 8

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Check which python we use
        run: |
          echo $(which python)

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-18
          components: rustfmt
          default: true

      - name: Install tools
        run: |
          pip install poetry
          cargo install cargo-quickinstall
          cargo quickinstall just

      - name: Setup project
        run: |
          just bootstrap-python
          just ci-build-python-extention
          echo "Content of the source folder"
          ls connectorx-python/connectorx
        env:
          SQLITE3_STATIC: 1

      - name: Build wheel
        run: |
          just ci-build-python-wheel
          echo "Built artifacts"
          ls target/wheels

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "windows-${{ matrix.python-version }}"
          path: target/wheels/*.whl

  darwin:
    runs-on: macos-10.15
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2

      - uses: ankane/setup-mysql@v1
        with:
          mysql-version: 8
      
      - name: Install brew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install openssl

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Check which python we use
        run: |
          echo $(which python)

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-18
          components: rustfmt
          default: true

      - name: Install tools
        run: |
          pip install poetry
          cargo install cargo-quickinstall
          cargo quickinstall just

      - name: Setup project
        run: |
          just bootstrap-python
          just ci-build-python-extention
          echo "Content of the source folder"
          ls connectorx-python/connectorx
        env:
          SQLITE3_STATIC: 1
          LDFLAGS: "-L/usr/local/opt/openssl@3/lib"
          CPPFLAGS: "-I/usr/local/opt/openssl@3/include"

      - name: Build wheel
        run: |
          just ci-build-python-wheel
          echo "Built artifacts"
          ls target/wheels

      - name: Persist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "macos-${{ matrix.python-version }}"
          path: target/wheels/*.whl

  upload:
    runs-on: ubuntu-latest
    needs: [win32, darwin, linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Setup environment
        run: |
          tree .
          echo "/home/runner/.local/bin" >> $GITHUB_PATH

      - name: Install Twine
        run: pip install twine

      - name: Upload to PyPI site
        if: github.ref == 'refs/heads/release'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          for file in $(ls **/*)
          do
            twine upload --non-interactive -u __token__ -p $PYPI_TOKEN $file || continue
          done

      - name: Upload to PyPI test site
        if: github.ref == 'refs/heads/prerelease'
        env:
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          for file in $(ls **/*)
          do
            twine upload --non-interactive --repository-url https://test.pypi.org/legacy/ -u __token__ -p $PYPI_TEST_TOKEN $file || continue
          done
